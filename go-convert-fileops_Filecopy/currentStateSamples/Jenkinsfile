pipeline {
    agent any
    
    tools {
        ant 'AntNew'
        gradle 'GradleNew'
        maven 'MavenNew'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git url: "https://github.com/Anshika2203/CombinedAllBuilds", branch: 'main'
            }
        }
        stage('Plugin Build') {
            steps {
                script {
                    // Perform the checkout
                    
                    // Use Maven to build
                    withMaven {
                    sh "mvn clean install\
                        package"
                    }
                    
                    // Use Ant to build
                    withAnt {
                        sh 'ant build'
                    }
                    
                    // Use Gradle to build
                    withGradle {
                        sh 'gradle build'
                    }
                }
            }
        }
        
        stage('ReadWriteFile') {
            steps {
                script {
                    writeFile file: 'output1.txt', text: '''line1 

line2

line3'''
                    readFile file: 'output1.txt'
                }
            }
        }
        stage('Artifact upload') {
           steps {
              script {
                 def server = Artifactory.server 'harness'
                 def uploadSpec = """{
                    "files": [{
                        "pattern": "target/output1.txt",
                        "target": "/artifactory/generic-local/op-ci/"
                    }]
                 }"""
                 server.upload(uploadSpec)
               }
            }
        }

        stage('DeleteDirStep') {
            steps {
                script {
                    // Create files in target directory
                    sh '''
                      mkdir -p target
                      touch target/file4.txt
                      touch target/file5.txt
                      touch target/file6.txt
                    '''
                    
                    // List files before deletion
                    sh 'ls'
                    
                    // Delete the target directory
                    dir('target') {
                        deleteDir()
                    }
                    
                    // List files after deletion
                    sh 'ls'
                }
            }
        }
        
        stage('Blackduck') {
            steps {
                synopsys_detect "--blackduck.url=https://harness.app.blackduck.com/ --blackduck.api.token=MzRkNDVkOWMtM2UzZS00OTgzLWE5ZmItOWNlOGI3NTlhZDZjOjVmNWE3NTE2LTdmYjYtNGNmMy05YmQyLWFkODRmNDNjYzhlMw== --detect.project.name=jenkinstestFinal --detect.project.version.name=v1.0"
            }
        }
        stage('Code Analysis') {
            environment {
                scannerHome = tool 'Sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=jenkins-SonarCube \
                            -Dsonar.projectName=jenkins-SonarCube"
                    }
                }
            }
        }
        stage('TimeOut Step') {
            steps {
                timeout(time: 9, unit: 'SECONDS') {
                    sh('echo this step must complete in less than nine seconds')
                }
                timeout(time: 1, unit: 'MINUTES') {
                    sh('echo this step must complete in less than one minute')
                }
                timeout(time: 1, unit: 'HOURS') {
                    sh('echo this step must complete in less than one hour')
                }
            }
        }
        stage('Sleep Step') {
            steps {
                sleep(time: 1, unit: 'MINUTES')
            }
        }
    }
    post {
        always {
            emailext subject: 'Email ${BUILD_STATUS}', body: 'Email ${BUILD_NUMBER}', to: 'first@example.com second@example.com'
        }
    }
}